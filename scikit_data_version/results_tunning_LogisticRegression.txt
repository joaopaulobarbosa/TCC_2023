best_params: 
	{'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}

best_score_: 
	0.6722292113917094

Classification report: 
              precision    recall  f1-score   support

           0       0.34      0.41      0.37       396
           1       0.31      0.30      0.31       398
           2       0.50      0.40      0.44       398

    accuracy                           0.37      1192
   macro avg       0.38      0.37      0.37      1192
weighted avg       0.38      0.37      0.37      1192


ROC AUC score: 
	0.5249955719194229

Confusion matrix: 
	[163 143  90]
	[206 120  72]
	[117 121 160]


The tunning of LogistcRegression process took: 
	99.11398100852966 seconds 

cv_results: 
{'mean_fit_time': array([0.0822825 , 0.13591971, 0.11838427, 0.2565496 , 0.09508843,
       0.17995591, 0.15342836, 0.26281109, 0.10815477, 0.1347198 ,
       0.12319317, 0.24686337, 0.12779083, 0.1379354 , 0.14783783,
       0.26091442, 0.11930857, 0.10349174, 0.12055421, 0.24794436,
       0.12179904, 0.10185537, 0.13033638, 0.25596452, 0.11558204,
       0.11224627, 0.1328249 , 0.22359457, 0.10304108, 0.11417031,
       0.13015347, 0.26355577, 0.08264203, 0.16350832, 0.51831236,
       0.78134422, 0.19183888, 0.16077538, 0.53931189, 1.10463271,
       0.22631626, 0.23943248, 0.57023335, 1.0478651 , 0.21594977,
       0.19612756, 0.53173003, 0.9268991 , 0.21230621, 0.16487241,
       0.43166547, 0.77996244, 0.21032124, 0.16020932, 0.42155752,
       0.9569149 , 0.20567875, 0.18820252, 0.49148836, 0.87470279,
       0.21804256, 0.14806061, 0.4041398 , 0.90490127, 0.22594581,
       0.2337975 , 0.85981727, 0.92170405, 0.15022497, 0.21485553,
       1.46772227, 1.58007073, 0.20022101, 0.20854325, 2.38963304,
       2.87396297, 0.24875116, 0.28078785, 2.26588902, 3.57922573,
       0.23932357, 0.26044149, 0.90159545, 0.74566779, 0.19266853,
       0.17923584, 1.50303998, 1.47684879, 0.17328973, 0.22575159,
       1.85043979, 2.62476835, 0.2395649 , 0.25701351, 1.89704976,
       3.08811617, 0.25011029, 0.29899487, 0.87775955, 0.860044  ,
       0.2251862 , 0.23971729, 1.55478435, 1.47677302, 0.19222832,
       0.2658071 , 2.99283133, 3.16473823, 0.27805152, 0.24786496,
       5.26566401, 6.07595358, 0.37821164, 0.44946122, 1.30517201,
       1.29389672, 0.26097393, 0.2161097 , 2.18367023, 1.94123588,
       0.30195065, 0.31060362, 3.25513802, 3.44130278, 0.23627777,
       0.30355325, 4.19021063, 4.36852565, 0.27031779, 0.35909781,
       0.96924462, 0.94206433, 0.21778564, 0.2442523 , 1.61139154,
       1.59395685, 0.20279264, 0.24352942, 3.00007539, 2.99066496,
       0.2654593 , 0.28045373, 4.71523285, 4.6457056 , 0.29255738,
       0.29611592, 1.05466976, 1.07493706, 0.17661591, 0.22754107,
       1.46068392, 1.51465673, 0.25844431, 0.23060207, 2.88665075,
       3.22713223, 0.25838733, 0.27694039, 4.52618046, 4.97838821]), 'std_fit_time': array([0.03742656, 0.03832402, 0.03618623, 0.01399835, 0.04734845,
       0.02269321, 0.04351933, 0.06003452, 0.01558626, 0.04265283,
       0.03643328, 0.04894256, 0.04102873, 0.01647962, 0.04753612,
       0.03916148, 0.03121216, 0.01255603, 0.02101663, 0.04806353,
       0.04260816, 0.0167672 , 0.03687928, 0.06866086, 0.06261704,
       0.02309145, 0.042831  , 0.04485213, 0.04504697, 0.02147635,
       0.02340525, 0.04603145, 0.0278153 , 0.04891051, 0.17485614,
       0.05457154, 0.03683953, 0.02769612, 0.12481071, 0.2001012 ,
       0.0545847 , 0.05535103, 0.09761017, 0.20827811, 0.01314107,
       0.0575241 , 0.14478073, 0.1401093 , 0.03255918, 0.04446783,
       0.06708654, 0.07758901, 0.01764881, 0.0464346 , 0.14753328,
       0.18727194, 0.02869923, 0.04693712, 0.12541863, 0.11841021,
       0.01820144, 0.04464684, 0.16911478, 0.13360931, 0.0194783 ,
       0.03163567, 0.20134596, 0.09931655, 0.06503132, 0.04521174,
       0.04206096, 0.15455167, 0.04821653, 0.05671123, 0.38676395,
       0.14799908, 0.03427666, 0.00768581, 0.47078238, 0.64208154,
       0.02974113, 0.02284735, 0.08903485, 0.09464464, 0.05532663,
       0.03933172, 0.13003563, 0.13107946, 0.04501071, 0.02295835,
       0.37140555, 0.36642558, 0.02543008, 0.01686993, 0.35688082,
       0.49211786, 0.01858733, 0.02449679, 0.14786366, 0.10501446,
       0.02860315, 0.02957133, 0.19223137, 0.24317654, 0.03879052,
       0.04519264, 0.14711236, 0.11813053, 0.03416145, 0.03395167,
       0.18066208, 0.3035083 , 0.07142332, 0.07146206, 0.19877676,
       0.06847868, 0.12004677, 0.01216368, 0.28882728, 0.34757399,
       0.06951647, 0.03802783, 0.38507452, 0.2019655 , 0.02556664,
       0.09278488, 0.79818673, 0.74282245, 0.03511701, 0.01709361,
       0.12296104, 0.05733137, 0.03037505, 0.01826501, 0.10369483,
       0.19672113, 0.08735168, 0.08748888, 0.08241692, 0.20163467,
       0.02274735, 0.04703045, 0.11165061, 0.42358289, 0.02736997,
       0.0181537 , 0.03789161, 0.02166375, 0.0765697 , 0.03995125,
       0.13661965, 0.25488855, 0.0231182 , 0.06243664, 0.22166102,
       0.06100347, 0.0371779 , 0.04863043, 0.86804133, 0.92635193]), 'mean_score_time': array([0.00339608, 0.00479512, 0.00314445, 0.00438566, 0.00647974,
       0.00363908, 0.00334501, 0.00308394, 0.00325818, 0.00375142,
       0.01513801, 0.00440187, 0.0039608 , 0.00322328, 0.00437679,
       0.00354204, 0.00495901, 0.00355844, 0.00409265, 0.00365386,
       0.00340376, 0.00396314, 0.00406623, 0.00376778, 0.00626826,
       0.00358381, 0.00470853, 0.00467887, 0.00847807, 0.00510221,
       0.00354757, 0.00561929, 0.00394111, 0.00380983, 0.00303173,
       0.00476546, 0.00350623, 0.00861359, 0.00405617, 0.00704455,
       0.00424142, 0.00404353, 0.00438876, 0.00413585, 0.0046783 ,
       0.00437078, 0.00337968, 0.00384765, 0.0039516 , 0.00367823,
       0.00298219, 0.00484505, 0.00422678, 0.00395322, 0.00302596,
       0.00329132, 0.00302925, 0.0035697 , 0.0030169 , 0.00440192,
       0.0034893 , 0.00420098, 0.0031908 , 0.00390682, 0.00340104,
       0.00354137, 0.00326757, 0.00681081, 0.00338612, 0.00356827,
       0.00313816, 0.0030839 , 0.0053287 , 0.00315928, 0.0031817 ,
       0.00346336, 0.00319724, 0.00339823, 0.00335217, 0.003372  ,
       0.0029295 , 0.00316539, 0.00819407, 0.00307102, 0.00403829,
       0.00344415, 0.00335927, 0.00299006, 0.00341325, 0.00398545,
       0.00331578, 0.00350027, 0.00344839, 0.00502806, 0.00294414,
       0.00314493, 0.00332937, 0.00333343, 0.00498385, 0.00374827,
       0.00409994, 0.00318685, 0.00315704, 0.00330467, 0.00394583,
       0.00322986, 0.00334277, 0.00397344, 0.00407419, 0.00333109,
       0.00406532, 0.00484757, 0.00609446, 0.0067522 , 0.00501246,
       0.00546556, 0.00539031, 0.00458837, 0.01503482, 0.0031898 ,
       0.00384245, 0.00465183, 0.00366583, 0.01090326, 0.0032414 ,
       0.00746574, 0.00329723, 0.00388794, 0.00319586, 0.00467072,
       0.00324359, 0.00453768, 0.0041429 , 0.00360718, 0.00552363,
       0.00346189, 0.00317144, 0.00336943, 0.00537596, 0.00339327,
       0.00355773, 0.00451703, 0.0034224 , 0.00344687, 0.00303369,
       0.00289321, 0.00307269, 0.00355005, 0.00403948, 0.00405731,
       0.00377598, 0.00318813, 0.00323186, 0.00505857, 0.00334749,
       0.00647264, 0.00446577, 0.00340786, 0.01276693, 0.002774  ]), 'std_score_time': array([0.00073492, 0.00215428, 0.00064887, 0.0016898 , 0.00380677,
       0.00043464, 0.00032522, 0.00059003, 0.00065611, 0.00077719,
       0.01450038, 0.00151279, 0.00034036, 0.0004858 , 0.00104815,
       0.00064459, 0.00074725, 0.00062448, 0.0004175 , 0.00042133,
       0.00048421, 0.00078231, 0.00132411, 0.00126583, 0.00248068,
       0.00055812, 0.00140763, 0.00136812, 0.00480722, 0.0011293 ,
       0.00080415, 0.00030605, 0.00076077, 0.00105928, 0.00034146,
       0.00089066, 0.00063689, 0.00810179, 0.0017564 , 0.00559134,
       0.00122386, 0.00102536, 0.00196579, 0.00184552, 0.0032074 ,
       0.00241997, 0.00056612, 0.00139881, 0.0014138 , 0.00080157,
       0.00020718, 0.0011929 , 0.00210544, 0.00056753, 0.00029563,
       0.00042964, 0.00015717, 0.00057968, 0.00032579, 0.0010713 ,
       0.00049184, 0.00097337, 0.00038919, 0.00089088, 0.00064213,
       0.00088738, 0.00055556, 0.0055215 , 0.0010995 , 0.00043   ,
       0.00032145, 0.00012003, 0.00460095, 0.00025081, 0.0004984 ,
       0.00093434, 0.00038291, 0.00070217, 0.00109181, 0.00032234,
       0.00019299, 0.00044392, 0.01055629, 0.00039187, 0.00106693,
       0.00041336, 0.00033562, 0.00033544, 0.0008123 , 0.00184278,
       0.00061668, 0.00093899, 0.00040441, 0.00185977, 0.00029633,
       0.00031116, 0.00059348, 0.00073773, 0.00213764, 0.00056606,
       0.00219923, 0.00047397, 0.00044953, 0.0006079 , 0.0012598 ,
       0.00035909, 0.0008973 , 0.0012767 , 0.00133199, 0.0006128 ,
       0.00206762, 0.0015382 , 0.00429877, 0.00295519, 0.00232725,
       0.00204529, 0.00195397, 0.00167343, 0.01377831, 0.00028349,
       0.00138793, 0.00330673, 0.00113341, 0.01300666, 0.00056294,
       0.0050728 , 0.00056948, 0.00144809, 0.00057427, 0.00250639,
       0.00048763, 0.00099409, 0.00131286, 0.00057825, 0.00406139,
       0.00074886, 0.00030961, 0.00023713, 0.00183951, 0.0002548 ,
       0.00077228, 0.00186215, 0.00060084, 0.00129525, 0.00026634,
       0.00020547, 0.00024764, 0.00117631, 0.00110059, 0.00121302,
       0.00135204, 0.0004555 , 0.00062733, 0.00184713, 0.00048615,
       0.00524777, 0.00273648, 0.00036117, 0.01287103, 0.00081192]), 'param_solver': masked_array(data=['lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_multi_class': masked_array(data=['ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[120, 120, 120, 120, 220, 220, 220, 220, 420, 420, 420,
                   420, 720, 720, 720, 720, 120, 120, 120, 120, 220, 220,
                   220, 220, 420, 420, 420, 420, 720, 720, 720, 720, 120,
                   120, 120, 120, 220, 220, 220, 220, 420, 420, 420, 420,
                   720, 720, 720, 720, 120, 120, 120, 120, 220, 220, 220,
                   220, 420, 420, 420, 420, 720, 720, 720, 720, 120, 120,
                   120, 120, 220, 220, 220, 220, 420, 420, 420, 420, 720,
                   720, 720, 720, 120, 120, 120, 120, 220, 220, 220, 220,
                   420, 420, 420, 420, 720, 720, 720, 720, 120, 120, 120,
                   120, 220, 220, 220, 220, 420, 420, 420, 420, 720, 720,
                   720, 720, 120, 120, 120, 120, 220, 220, 220, 220, 420,
                   420, 420, 420, 720, 720, 720, 720, 120, 120, 120, 120,
                   220, 220, 220, 220, 420, 420, 420, 420, 720, 720, 720,
                   720, 120, 120, 120, 120, 220, 220, 220, 220, 420, 420,
                   420, 420, 720, 720, 720, 720],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fit_intercept': masked_array(data=[True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_class_weight': masked_array(data=['balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_C': masked_array(data=[0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}], 'split0_test_score': array([0.62734187, 0.62734187, 0.62734187, 0.6299197 , 0.62734187,
       0.62734187, 0.62734187, 0.63011602, 0.62734187, 0.62734187,
       0.62734187, 0.6299197 , 0.62734187, 0.62734187, 0.62734187,
       0.6299197 , 0.63047189, 0.63047189, 0.63047189, 0.63047189,
       0.63047189, 0.63047189, 0.63047189, 0.63047189, 0.63047189,
       0.63047189, 0.63047189, 0.63047189, 0.63047189, 0.63047189,
       0.63047189, 0.63047189, 0.64940139, 0.64940139, 0.64940139,
       0.64940139, 0.64940139, 0.64940139, 0.64940139, 0.64940139,
       0.64940139, 0.64940139, 0.64940139, 0.64940139, 0.64940139,
       0.64940139, 0.64940139, 0.64940139, 0.63501529, 0.63501529,
       0.63501529, 0.63501529, 0.63501529, 0.63501529, 0.63501529,
       0.63501529, 0.63501529, 0.63501529, 0.63501529, 0.63501529,
       0.63501529, 0.63501529, 0.63501529, 0.63501529, 0.64607248,
       0.64607248, 0.64221287, 0.64075078, 0.64607248, 0.64607248,
       0.64341669, 0.63669018, 0.64607248, 0.64607248, 0.64607248,
       0.64341669, 0.64607248, 0.64607248, 0.64607248, 0.64341669,
       0.6335978 , 0.6335978 , 0.63121871, 0.63385809, 0.6335978 ,
       0.6335978 , 0.63102239, 0.63121871, 0.6335978 , 0.6335978 ,
       0.63102239, 0.63102239, 0.6335978 , 0.6335978 , 0.63102239,
       0.63102239, 0.6417362 , 0.6417362 , 0.64023021, 0.64600265,
       0.6417362 , 0.6417362 , 0.63468103, 0.64658337, 0.6417362 ,
       0.6417362 , 0.63544419, 0.63468103, 0.6417362 , 0.6417362 ,
       0.63859999, 0.63124799, 0.61598929, 0.61598929, 0.62832722,
       0.62763155, 0.61598929, 0.61598929, 0.6271566 , 0.62832722,
       0.61598929, 0.61598929, 0.62219874, 0.6271566 , 0.61598929,
       0.61598929, 0.61598929, 0.62219874, 0.64785257, 0.64785257,
       0.63772327, 0.6428164 , 0.64785257, 0.64785257, 0.63445477,
       0.64658337, 0.64785257, 0.64785257, 0.63342581, 0.63445477,
       0.64785257, 0.64785257, 0.63654966, 0.62939854, 0.61915131,
       0.61915131, 0.62832722, 0.62763155, 0.61915131, 0.61915131,
       0.6221179 , 0.62832722, 0.61915131, 0.61915131, 0.61333852,
       0.6221179 , 0.61915131, 0.61915131, 0.6157212 , 0.61697779]), 'split1_test_score': array([0.62851678, 0.62851678, 0.62851678, 0.62851678, 0.62851678,
       0.62851678, 0.62851678, 0.62851678, 0.62851678, 0.62851678,
       0.62851678, 0.62851678, 0.62851678, 0.62851678, 0.62851678,
       0.62851678, 0.62165907, 0.62165907, 0.62165907, 0.62165907,
       0.62165907, 0.62165907, 0.62165907, 0.62165907, 0.62165907,
       0.62165907, 0.62165907, 0.62165907, 0.62165907, 0.62165907,
       0.62165907, 0.62165907, 0.70452092, 0.70452092, 0.70443206,
       0.70443206, 0.70452092, 0.70452092, 0.70443206, 0.70443206,
       0.70452092, 0.70452092, 0.70443206, 0.70443206, 0.70452092,
       0.70452092, 0.70443206, 0.70443206, 0.67737769, 0.67737769,
       0.67737769, 0.67428819, 0.67737769, 0.67737769, 0.67737769,
       0.67737769, 0.67737769, 0.67737769, 0.67737769, 0.67737769,
       0.67737769, 0.67737769, 0.67737769, 0.67737769, 0.71552784,
       0.71552784, 0.71298813, 0.710513  , 0.71552784, 0.71552784,
       0.71841294, 0.71298813, 0.71552784, 0.71552784, 0.71841294,
       0.71841294, 0.71552784, 0.71552784, 0.71841294, 0.71841294,
       0.70626747, 0.70626747, 0.70399186, 0.70722805, 0.70626747,
       0.70626747, 0.70626747, 0.70399186, 0.70626747, 0.70626747,
       0.70626747, 0.70626747, 0.70626747, 0.70626747, 0.70626747,
       0.70626747, 0.72673788, 0.72673788, 0.71301025, 0.71556435,
       0.72673788, 0.72673788, 0.72110636, 0.71301025, 0.72673788,
       0.72673788, 0.72133204, 0.72110636, 0.72673788, 0.72673788,
       0.7239172 , 0.72133204, 0.706502  , 0.706502  , 0.7118085 ,
       0.70701955, 0.706502  , 0.706502  , 0.7013014 , 0.70878623,
       0.706502  , 0.706502  , 0.70107704, 0.7013014 , 0.706502  ,
       0.706502  , 0.70079075, 0.70405283, 0.72953335, 0.72953335,
       0.71544172, 0.71556435, 0.72953335, 0.72953335, 0.71850937,
       0.71301025, 0.72953335, 0.72953335, 0.72673788, 0.71850937,
       0.72953335, 0.72953335, 0.72673788, 0.72133204, 0.70921902,
       0.70921902, 0.7118085 , 0.70414926, 0.70921902, 0.70921902,
       0.69832179, 0.70878623, 0.70921902, 0.70921902, 0.70379406,
       0.7013014 , 0.70921902, 0.70921902, 0.706502  , 0.69808979]), 'split2_test_score': array([0.62462737, 0.62462737, 0.62462737, 0.62462737, 0.62462737,
       0.62462737, 0.62462737, 0.62462737, 0.62462737, 0.62462737,
       0.62462737, 0.62462737, 0.62462737, 0.62462737, 0.62462737,
       0.62462737, 0.62548997, 0.62548997, 0.62548997, 0.62548997,
       0.62548997, 0.62548997, 0.62548997, 0.62548997, 0.62548997,
       0.62548997, 0.62548997, 0.62548997, 0.62548997, 0.62548997,
       0.62548997, 0.62548997, 0.66179813, 0.66179813, 0.66179813,
       0.66179813, 0.66179813, 0.66179813, 0.66179813, 0.66179813,
       0.66179813, 0.66179813, 0.66179813, 0.66179813, 0.66179813,
       0.66179813, 0.66179813, 0.66179813, 0.63679516, 0.63679516,
       0.63679516, 0.63679516, 0.63679516, 0.63679516, 0.63679516,
       0.63679516, 0.63679516, 0.63679516, 0.63679516, 0.63679516,
       0.63679516, 0.63679516, 0.63679516, 0.63679516, 0.6754414 ,
       0.6754414 , 0.6695815 , 0.65841078, 0.6754414 , 0.6754414 ,
       0.6754414 , 0.66956335, 0.6754414 , 0.6754414 , 0.6754414 ,
       0.67253049, 0.6754414 , 0.6754414 , 0.6754414 , 0.6754414 ,
       0.67970189, 0.67970189, 0.67970189, 0.67127044, 0.67970189,
       0.67970189, 0.67970189, 0.67712716, 0.67970189, 0.67970189,
       0.67970189, 0.67970189, 0.67970189, 0.67970189, 0.67970189,
       0.67970189, 0.67243236, 0.67243236, 0.67795203, 0.6667495 ,
       0.67243236, 0.67243236, 0.6754414 , 0.67248333, 0.67243236,
       0.67243236, 0.67263178, 0.6754414 , 0.67243236, 0.67243236,
       0.67263178, 0.67263178, 0.69703593, 0.69703593, 0.6854112 ,
       0.67449701, 0.69703593, 0.69703593, 0.69327246, 0.68279228,
       0.69703593, 0.69703593, 0.69672652, 0.69327246, 0.69703593,
       0.69703593, 0.69662439, 0.69930109, 0.68090248, 0.68090248,
       0.67795203, 0.66672788, 0.68090248, 0.68090248, 0.6782404 ,
       0.6751088 , 0.68090248, 0.68090248, 0.67001729, 0.6782404 ,
       0.68090248, 0.68090248, 0.67256051, 0.67263178, 0.69720763,
       0.69720763, 0.68512527, 0.67449701, 0.69720763, 0.69720763,
       0.69327246, 0.67995252, 0.69720763, 0.69720763, 0.69672652,
       0.69327246, 0.69720763, 0.69720763, 0.694353  , 0.69672652]), 'split3_test_score': array([0.57331887, 0.57331887, 0.57331887, 0.57331887, 0.57331887,
       0.57331887, 0.57331887, 0.57331887, 0.57331887, 0.57331887,
       0.57331887, 0.57331887, 0.57331887, 0.57331887, 0.57331887,
       0.57331887, 0.56367095, 0.56367095, 0.56367095, 0.56367095,
       0.56367095, 0.56367095, 0.56367095, 0.56367095, 0.56367095,
       0.56367095, 0.56367095, 0.56367095, 0.56367095, 0.56367095,
       0.56367095, 0.56367095, 0.62133057, 0.62133057, 0.62133057,
       0.618665  , 0.62133057, 0.62133057, 0.62133057, 0.62133057,
       0.62133057, 0.62133057, 0.62133057, 0.62133057, 0.62133057,
       0.62133057, 0.62133057, 0.62133057, 0.62050763, 0.62050763,
       0.62050763, 0.62050763, 0.62050763, 0.62050763, 0.62050763,
       0.62050763, 0.62050763, 0.62050763, 0.62050763, 0.62050763,
       0.62050763, 0.62050763, 0.62050763, 0.62050763, 0.67000129,
       0.67000129, 0.67259246, 0.64523728, 0.67000129, 0.67000129,
       0.67000129, 0.66995008, 0.67000129, 0.67000129, 0.67000129,
       0.67000129, 0.67000129, 0.67000129, 0.67000129, 0.67000129,
       0.66831817, 0.66831817, 0.65958304, 0.64063227, 0.66831817,
       0.66831817, 0.66569778, 0.65057309, 0.66831817, 0.66831817,
       0.66831817, 0.66569778, 0.66831817, 0.66831817, 0.66831817,
       0.66826738, 0.67636919, 0.67636919, 0.67019254, 0.66056592,
       0.67636919, 0.67636919, 0.66726029, 0.67025025, 0.67636919,
       0.67636919, 0.67080118, 0.66726029, 0.67636919, 0.67636919,
       0.67636919, 0.67080118, 0.66355397, 0.66355397, 0.67457548,
       0.64389568, 0.66355397, 0.66355397, 0.66617122, 0.67450316,
       0.66355397, 0.66355397, 0.66350136, 0.66617122, 0.66355397,
       0.66355397, 0.66363732, 0.6663318 , 0.67370426, 0.67370426,
       0.67019254, 0.66056592, 0.67370426, 0.67370426, 0.66726029,
       0.67025025, 0.67370426, 0.67370426, 0.67070762, 0.66726029,
       0.67370426, 0.67370426, 0.67357716, 0.67080118, 0.6662694 ,
       0.6662694 , 0.67457548, 0.64389568, 0.6662694 , 0.6662694 ,
       0.66624486, 0.67450316, 0.6662694 , 0.6662694 , 0.66355397,
       0.66617122, 0.6662694 , 0.6662694 , 0.6662694 , 0.66621742]), 'split4_test_score': array([0.5322906 , 0.5322906 , 0.5322906 , 0.5322906 , 0.5322906 ,
       0.5322906 , 0.5322906 , 0.5322906 , 0.5322906 , 0.5322906 ,
       0.5322906 , 0.5322906 , 0.5322906 , 0.5322906 , 0.5322906 ,
       0.5322906 , 0.52276279, 0.52276279, 0.52276279, 0.52276279,
       0.52276279, 0.52276279, 0.52276279, 0.52276279, 0.52276279,
       0.52276279, 0.52276279, 0.52276279, 0.52276279, 0.52276279,
       0.52276279, 0.52276279, 0.58807165, 0.58807165, 0.58807165,
       0.58807165, 0.58807165, 0.58807165, 0.58807165, 0.58807165,
       0.58807165, 0.58807165, 0.58807165, 0.58807165, 0.58807165,
       0.58807165, 0.58807165, 0.58807165, 0.58265321, 0.58265321,
       0.58265321, 0.58265321, 0.58265321, 0.58265321, 0.58265321,
       0.58265321, 0.58265321, 0.58265321, 0.58265321, 0.58265321,
       0.58265321, 0.58265321, 0.58265321, 0.58265321, 0.62055075,
       0.62055075, 0.62055075, 0.61776303, 0.62055075, 0.62055075,
       0.62055075, 0.62055075, 0.62055075, 0.62055075, 0.62055075,
       0.62055075, 0.62055075, 0.62055075, 0.62055075, 0.62055075,
       0.61912589, 0.61912589, 0.61912589, 0.61734772, 0.61912589,
       0.61912589, 0.61912589, 0.61912589, 0.61912589, 0.61912589,
       0.61912589, 0.61912589, 0.61912589, 0.61912589, 0.61912589,
       0.61912589, 0.62943741, 0.62943741, 0.62107065, 0.62367155,
       0.62943741, 0.62943741, 0.62371994, 0.62429973, 0.62943741,
       0.62943741, 0.62698989, 0.62371994, 0.62943741, 0.62943741,
       0.62698989, 0.62698989, 0.61890625, 0.61890625, 0.61548656,
       0.62136754, 0.61890625, 0.61890625, 0.61890625, 0.61548656,
       0.61890625, 0.61890625, 0.61890625, 0.61890625, 0.61890625,
       0.61890625, 0.61890625, 0.61890625, 0.62915339, 0.62915339,
       0.62107065, 0.62692871, 0.62915339, 0.62915339, 0.62695289,
       0.62107065, 0.62915339, 0.62915339, 0.62646953, 0.62371994,
       0.62915339, 0.62915339, 0.62646953, 0.62137091, 0.61859443,
       0.61598992, 0.61548656, 0.62136754, 0.61859443, 0.61598992,
       0.61531317, 0.61548656, 0.61859443, 0.61598992, 0.61859443,
       0.62136754, 0.61859443, 0.61598992, 0.61859443, 0.61598992]), 'mean_test_score': array([0.5972191 , 0.5972191 , 0.5972191 , 0.59773466, 0.5972191 ,
       0.5972191 , 0.5972191 , 0.59777393, 0.5972191 , 0.5972191 ,
       0.5972191 , 0.59773466, 0.5972191 , 0.5972191 , 0.5972191 ,
       0.59773466, 0.59281094, 0.59281094, 0.59281094, 0.59281094,
       0.59281094, 0.59281094, 0.59281094, 0.59281094, 0.59281094,
       0.59281094, 0.59281094, 0.59281094, 0.59281094, 0.59281094,
       0.59281094, 0.59281094, 0.64502453, 0.64502453, 0.64500676,
       0.64447365, 0.64502453, 0.64502453, 0.64500676, 0.64500676,
       0.64502453, 0.64502453, 0.64500676, 0.64500676, 0.64502453,
       0.64502453, 0.64500676, 0.64500676, 0.6304698 , 0.6304698 ,
       0.6304698 , 0.6298519 , 0.6304698 , 0.6304698 , 0.6304698 ,
       0.6304698 , 0.6304698 , 0.6304698 , 0.6304698 , 0.6304698 ,
       0.6304698 , 0.6304698 , 0.6304698 , 0.6304698 , 0.66551875,
       0.66551875, 0.66358514, 0.65453498, 0.66551875, 0.66551875,
       0.66556461, 0.6619485 , 0.66551875, 0.66551875, 0.66609577,
       0.66498243, 0.66551875, 0.66551875, 0.66609577, 0.66556461,
       0.66140224, 0.66140224, 0.65872428, 0.65406731, 0.66140224,
       0.66140224, 0.66036308, 0.65640734, 0.66140224, 0.66140224,
       0.66088716, 0.66036308, 0.66140224, 0.66140224, 0.66088716,
       0.660877  , 0.66934261, 0.66934261, 0.66449114, 0.66251079,
       0.66934261, 0.66934261, 0.6644418 , 0.66532539, 0.66934261,
       0.66934261, 0.66543982, 0.6644418 , 0.66934261, 0.66934261,
       0.66770161, 0.66460057, 0.66039749, 0.66039749, 0.66312179,
       0.65488227, 0.66039749, 0.66039749, 0.66136159, 0.66197909,
       0.66039749, 0.66039749, 0.66048198, 0.66136159, 0.66039749,
       0.66039749, 0.6591896 , 0.66215814, 0.67222921, 0.67222921,
       0.66447604, 0.66252065, 0.67222921, 0.67222921, 0.66508354,
       0.66520467, 0.67222921, 0.67222921, 0.66547162, 0.66443695,
       0.67222921, 0.67222921, 0.66717895, 0.66310689, 0.66208836,
       0.66156746, 0.66306461, 0.65430821, 0.66208836, 0.66156746,
       0.65905404, 0.66141114, 0.66208836, 0.66156746, 0.6592015 ,
       0.6608461 , 0.66208836, 0.66156746, 0.660288  , 0.65880029]), 'std_test_score': array([0.03853588, 0.03853588, 0.03853588, 0.03895045, 0.03853588,
       0.03853588, 0.03853588, 0.03898297, 0.03853588, 0.03853588,
       0.03853588, 0.03895045, 0.03853588, 0.03853588, 0.03853588,
       0.03895045, 0.04260132, 0.04260132, 0.04260132, 0.04260132,
       0.04260132, 0.04260132, 0.04260132, 0.04260132, 0.04260132,
       0.04260132, 0.04260132, 0.04260132, 0.04260132, 0.04260132,
       0.04260132, 0.04260132, 0.03910336, 0.03910336, 0.03907633,
       0.03941244, 0.03910336, 0.03910336, 0.03907633, 0.03907633,
       0.03910336, 0.03910336, 0.03907633, 0.03907633, 0.03910336,
       0.03910336, 0.03907633, 0.03907633, 0.03048505, 0.03048505,
       0.03048505, 0.02954483, 0.03048505, 0.03048505, 0.03048505,
       0.03048505, 0.03048505, 0.03048505, 0.03048505, 0.03048505,
       0.03048505, 0.03048505, 0.03048505, 0.03048505, 0.03168514,
       0.03168514, 0.03119768, 0.03091015, 0.03168514, 0.03168514,
       0.03294528, 0.03187103, 0.03168514, 0.03168514, 0.03260356,
       0.03279096, 0.03168514, 0.03168514, 0.03260356, 0.03294528,
       0.03148324, 0.03148324, 0.03103076, 0.0318096 , 0.03148324,
       0.03148324, 0.03184664, 0.03082859, 0.03148324, 0.03148324,
       0.03195151, 0.03184664, 0.03148324, 0.03148324, 0.03195151,
       0.03194915, 0.03378661, 0.03378661, 0.03175449, 0.03038893,
       0.03378661, 0.03378661, 0.03430388, 0.02960981, 0.03378661,
       0.03378661, 0.0334142 , 0.03430388, 0.03378661, 0.03378661,
       0.03395283, 0.03420048, 0.03787235, 0.03787235, 0.03599494,
       0.03190479, 0.03787235, 0.03787235, 0.03349347, 0.03485672,
       0.03787235, 0.03787235, 0.03511378, 0.03349347, 0.03787235,
       0.03787235, 0.03644398, 0.03638588, 0.0340908 , 0.0340908 ,
       0.03289839, 0.02996731, 0.0340908 , 0.0340908 , 0.032937  ,
       0.03067079, 0.0340908 , 0.0340908 , 0.0356363 , 0.03370204,
       0.0340908 , 0.0340908 , 0.03524932, 0.03582803, 0.03796697,
       0.03857316, 0.03595969, 0.03097376, 0.03796697, 0.03857316,
       0.03476235, 0.03453461, 0.03796697, 0.03857316, 0.03786269,
       0.03398496, 0.03796697, 0.03857316, 0.03756724, 0.03638386]), 'rank_test_score': array([133, 133, 133, 130, 133, 133, 133, 129, 133, 133, 133, 130, 133,
       133, 133, 130, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
       145, 145, 145, 145, 145, 145,  97,  97, 105, 112,  97,  97, 105,
       105,  97,  97, 105, 105,  97,  97, 105, 105, 113, 113, 113, 128,
       113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,  23,
        23,  43,  94,  23,  23,  21,  55,  23,  23,  19,  36,  23,  23,
        19,  21,  61,  61,  91,  96,  61,  61,  84,  92,  61,  61,  71,
        84,  61,  61,  71,  73,   9,   9,  38,  48,   9,   9,  40,  33,
         9,   9,  32,  40,   9,   9,  17,  37,  76,  76,  44,  93,  76,
        76,  69,  54,  76,  76,  75,  69,  76,  76,  88,  49,   1,   1,
        39,  47,   1,   1,  35,  34,   1,   1,  31,  42,   1,   1,  18,
        45,  50,  56,  46,  95,  50,  56,  89,  60,  50,  56,  87,  74,
        50,  56,  86,  90], dtype=int32)}