best_params: 
	{'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}

best_score_: 
	0.5220648604167668

Classification report: 
              precision    recall  f1-score   support

           0       0.45      0.38      0.41       355
           1       0.60      0.54      0.57       522
           2       0.36      0.50      0.42       295

    accuracy                           0.48      1172
   macro avg       0.47      0.47      0.47      1172
weighted avg       0.49      0.48      0.48      1172


ROC AUC score: 
	0.6496855523757935

Confusion matrix: 
	[135 113 107]
	[ 90 280 152]
	[ 72  76 147]


The tunning of LogistcRegression process took: 
	38.210689306259155 seconds 

cv_results: 
{'mean_fit_time': array([0.11720276, 0.22834496, 0.12823219, 0.13109727, 0.08809848,
       0.16985693, 0.10357575, 0.14417415, 0.0747735 , 0.20840459,
       0.26231933, 0.29217858, 0.18141894, 0.30204558, 0.25807548,
       0.14666157, 0.07158308, 0.12362075, 0.11809249, 0.1044692 ,
       0.04979696, 0.14778218, 0.12093892, 0.14082336, 0.09332728,
       0.14922514, 0.12673988, 0.14036922, 0.08657966, 0.20028892,
       0.18188734, 0.21803536, 0.14003744, 0.35558529, 0.23048849,
       0.24678493, 0.16855841, 0.33859835, 0.25835733, 0.22954316,
       0.14381442, 0.2458077 , 0.22680287, 0.24316764, 0.08418832,
       0.22022099, 0.23755951, 0.2524106 , 0.16641078, 0.26174703,
       0.26422429, 0.27860093, 0.27555523, 0.30993872, 0.2613965 ,
       0.22793093, 0.18097439, 0.25860796, 0.24472051, 0.25312119,
       0.15354228, 0.21075888, 0.19622011, 0.24808264, 0.19673905,
       0.31214557, 0.39204364, 0.46137409, 0.190657  , 0.27249455,
       0.28142581, 0.43674903, 0.20100965, 0.2642149 , 0.33350439,
       0.39962077, 0.21778569, 0.32989321, 0.33447943, 0.46428056,
       0.23588424, 0.30107183, 0.29185076, 0.47553825, 0.2081275 ,
       0.30600271, 0.33138533, 0.4317337 , 0.19225616, 0.28342891,
       0.28093624, 0.55426092, 0.33518949, 0.44810538, 0.36625638,
       0.55966625, 0.29775767, 0.31813378, 0.33234558, 0.56345086,
       0.23693709, 0.39186883, 0.38659272, 0.54573045, 0.24670215,
       0.35002518, 0.38391171, 0.64208717, 0.28343511, 0.32341552,
       0.28268638, 0.54021101, 0.23925257, 0.39119663, 0.3812078 ,
       0.52062831, 0.24500432, 0.30684552, 0.3334919 , 0.54724774,
       0.28142014, 0.31348567, 0.32129989, 0.62910771, 0.29560671,
       0.37124448, 0.34932318, 0.50417752, 0.26536179, 0.34538169,
       0.38971529, 0.55719013, 0.26111789, 0.33952327, 0.41788316,
       0.70755696, 0.27896867, 0.3563056 , 0.30877366, 0.69328852,
       0.32848296, 0.36267767, 0.29400721, 0.61889744, 0.25757904,
       0.46801586, 0.40682907, 0.66640148, 0.27471695, 0.35028987,
       0.46634512, 0.55893207, 0.21499639, 0.31673908, 0.36432571,
       0.49527574, 0.30443478, 0.39302959, 0.31209369, 0.46070743]), 'std_fit_time': array([0.0376322 , 0.02500333, 0.03687494, 0.04148096, 0.03433144,
       0.01334654, 0.01423247, 0.03525184, 0.03577425, 0.04332271,
       0.06596932, 0.08551627, 0.0508439 , 0.02595558, 0.07428061,
       0.03508234, 0.02627788, 0.00522985, 0.01358652, 0.02654323,
       0.01650393, 0.02769745, 0.01264439, 0.02179623, 0.03133606,
       0.02587134, 0.03059536, 0.03279008, 0.02146957, 0.05339219,
       0.04370217, 0.04072307, 0.04605225, 0.04439126, 0.04809364,
       0.07176947, 0.04255029, 0.01616972, 0.01672529, 0.04908176,
       0.03744518, 0.01573519, 0.06045572, 0.04677587, 0.02800352,
       0.03013966, 0.03990423, 0.05417359, 0.04511817, 0.05962849,
       0.07480158, 0.08373767, 0.01812549, 0.05406073, 0.07955055,
       0.07243292, 0.01272193, 0.02998894, 0.05258809, 0.04412153,
       0.05329257, 0.01944912, 0.02158607, 0.07793276, 0.03161401,
       0.02821116, 0.04669622, 0.0783954 , 0.0271501 , 0.02836397,
       0.08822794, 0.07490753, 0.05961809, 0.04543277, 0.09639637,
       0.07724   , 0.0448339 , 0.02568973, 0.11061308, 0.08035144,
       0.03959938, 0.06195905, 0.05020038, 0.09136104, 0.05790864,
       0.03579984, 0.08773474, 0.04980198, 0.06406178, 0.0215191 ,
       0.06580871, 0.09713475, 0.0994024 , 0.07663475, 0.03415509,
       0.07846426, 0.04738343, 0.01914651, 0.13593082, 0.08834097,
       0.06834756, 0.03286642, 0.07616749, 0.06300919, 0.06298708,
       0.05067803, 0.0991536 , 0.07411694, 0.01380031, 0.04999867,
       0.03503623, 0.08452007, 0.08319683, 0.06242465, 0.16254617,
       0.06481325, 0.03195736, 0.04725665, 0.06044058, 0.20918101,
       0.05833521, 0.06847087, 0.06424327, 0.11371599, 0.0499025 ,
       0.05864174, 0.06134362, 0.10219098, 0.07873747, 0.03186992,
       0.02715846, 0.07469881, 0.03920244, 0.02389762, 0.0731802 ,
       0.09960914, 0.05061262, 0.04838118, 0.06666256, 0.04791803,
       0.08512559, 0.0523377 , 0.07443706, 0.08802496, 0.03262724,
       0.09898935, 0.03521149, 0.04895395, 0.03340722, 0.03147714,
       0.0805868 , 0.09649905, 0.0568901 , 0.03216098, 0.07783479,
       0.15080658, 0.01350808, 0.04388481, 0.08756622, 0.05251454]), 'mean_score_time': array([0.006213  , 0.00427732, 0.00277476, 0.00324898, 0.00333023,
       0.0033639 , 0.00262713, 0.00329604, 0.00377851, 0.00683956,
       0.00856104, 0.00951962, 0.01018882, 0.00615396, 0.00330334,
       0.00317373, 0.00365329, 0.00363278, 0.00260062, 0.00272503,
       0.00302081, 0.00599976, 0.00358553, 0.00410142, 0.00487938,
       0.00312285, 0.00305386, 0.00448203, 0.00837569, 0.00750055,
       0.00848179, 0.00834756, 0.00753837, 0.00365763, 0.00850458,
       0.00657563, 0.00798244, 0.00491581, 0.00601292, 0.0047884 ,
       0.00623837, 0.00395741, 0.00455923, 0.00433121, 0.00349979,
       0.00499268, 0.00459895, 0.00412364, 0.00573549, 0.00403924,
       0.00416722, 0.01187506, 0.00708618, 0.00564375, 0.00656147,
       0.00476494, 0.00585294, 0.0112164 , 0.00569334, 0.00513206,
       0.00468445, 0.0048986 , 0.00447173, 0.00442729, 0.00480428,
       0.00415783, 0.00449967, 0.0053051 , 0.00454512, 0.00397882,
       0.00664458, 0.00587091, 0.00505581, 0.00351887, 0.00445919,
       0.00390091, 0.00425844, 0.00447226, 0.00456672, 0.0049541 ,
       0.00663509, 0.00765133, 0.00471025, 0.00447102, 0.00618191,
       0.00423207, 0.00612679, 0.00413938, 0.00602636, 0.00365582,
       0.00688829, 0.01167178, 0.01328158, 0.01537776, 0.01465421,
       0.00502882, 0.00635643, 0.00399728, 0.00448475, 0.00442748,
       0.0043355 , 0.01188774, 0.00567265, 0.01312461, 0.00542879,
       0.00400581, 0.00660591, 0.00758815, 0.00511246, 0.00357628,
       0.00331182, 0.00758734, 0.00507965, 0.00688577, 0.00447836,
       0.00526648, 0.0039938 , 0.00407271, 0.0050005 , 0.00699396,
       0.0035378 , 0.00534062, 0.00834861, 0.00650287, 0.00648599,
       0.00438132, 0.00739102, 0.00487995, 0.0048471 , 0.00552363,
       0.00449114, 0.00614505, 0.00454164, 0.0050045 , 0.0029953 ,
       0.00687194, 0.00415111, 0.00642338, 0.004952  , 0.0056603 ,
       0.00604949, 0.00427585, 0.00360427, 0.00956926, 0.00543165,
       0.00601444, 0.00653024, 0.00499434, 0.00891414, 0.0041573 ,
       0.00984316, 0.00530977, 0.00541544, 0.0043221 , 0.00410881,
       0.00475368, 0.00501471, 0.00813041, 0.0043622 , 0.00538459]), 'std_score_time': array([2.15295702e-03, 1.30034727e-03, 2.71359786e-04, 5.98619314e-04,
       1.35248167e-03, 1.35583996e-03, 5.39977838e-04, 8.90577548e-04,
       1.05916314e-03, 1.75109359e-03, 6.99196196e-03, 3.68795663e-03,
       3.60800246e-03, 1.14142663e-03, 1.31957163e-03, 1.01092090e-03,
       1.66293460e-03, 1.18826726e-03, 3.63823639e-04, 4.88380021e-04,
       8.76904550e-04, 1.87035709e-03, 9.97919872e-04, 2.16200119e-03,
       2.27375975e-03, 1.22718679e-03, 7.44651560e-04, 1.40219826e-03,
       5.13336780e-03, 6.15925915e-03, 4.57263900e-03, 4.75616063e-03,
       3.81092616e-03, 6.88366165e-04, 3.78565359e-03, 3.22149941e-03,
       2.95008219e-03, 7.86057032e-04, 2.62555990e-03, 1.55069464e-03,
       2.65371490e-03, 8.51558442e-04, 1.76709802e-03, 6.67034590e-04,
       7.63651298e-04, 2.52202389e-03, 2.39299082e-03, 8.60087104e-04,
       1.47223182e-03, 9.23920426e-04, 1.38923199e-03, 3.29690664e-03,
       2.99978017e-03, 1.01037980e-03, 1.95494373e-03, 7.75395584e-04,
       8.94156439e-04, 1.02532702e-02, 2.75663819e-03, 2.66261941e-03,
       6.93383519e-04, 1.06214639e-03, 7.85716180e-04, 1.59906148e-03,
       9.34461510e-04, 7.04888574e-04, 1.67486680e-03, 2.11853792e-03,
       9.74498167e-04, 1.02389152e-03, 2.22940120e-03, 1.03312428e-03,
       1.69506103e-03, 5.59064887e-04, 1.93673918e-03, 4.98900857e-04,
       7.21595111e-04, 8.45788086e-04, 1.46606515e-03, 1.13693057e-03,
       4.36874236e-03, 7.65194957e-03, 1.52860639e-03, 1.40912152e-03,
       1.78040038e-03, 5.79130391e-04, 4.92532651e-03, 7.67109670e-04,
       2.10602169e-03, 1.06053162e-03, 4.97247624e-03, 1.06677994e-02,
       1.16473211e-02, 1.95926886e-02, 1.84192832e-02, 1.43528818e-03,
       2.21645741e-03, 9.25007423e-04, 1.63669486e-03, 7.90995947e-04,
       8.55378834e-04, 4.68365482e-03, 1.41908869e-03, 9.93497888e-03,
       1.64721129e-03, 4.76005176e-04, 2.34175556e-03, 2.87078718e-03,
       1.28465735e-03, 4.30212648e-04, 2.58423850e-04, 2.97408041e-03,
       1.29978815e-03, 3.60986376e-03, 1.62250797e-03, 1.93618866e-03,
       6.34934011e-04, 1.33227322e-03, 2.40228976e-03, 3.65812364e-03,
       6.66469628e-04, 1.37836928e-03, 4.58497430e-03, 1.72372174e-03,
       2.42808871e-03, 1.43689300e-03, 5.11661552e-03, 1.26160656e-03,
       1.99415239e-03, 1.97050879e-03, 1.26401745e-03, 2.37370277e-03,
       1.07781387e-03, 1.67661793e-03, 9.06188090e-05, 3.29369896e-03,
       5.44087203e-04, 3.03784217e-03, 1.40161578e-03, 2.26489524e-03,
       2.61036762e-03, 5.58182844e-04, 9.96712428e-04, 3.45457715e-03,
       1.11202777e-03, 1.73111124e-03, 2.25336225e-03, 1.17303799e-03,
       1.02655408e-02, 8.56469904e-04, 1.09130780e-02, 2.33477592e-03,
       2.54119058e-03, 1.41302041e-03, 2.00174863e-03, 1.51368784e-03,
       1.93505150e-03, 2.19099457e-03, 1.22983298e-03, 1.77109588e-03]), 'param_solver': masked_array(data=['lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga',
                   'lbfgs', 'newton-cg', 'sag', 'saga', 'lbfgs',
                   'newton-cg', 'sag', 'saga', 'lbfgs', 'newton-cg',
                   'sag', 'saga', 'lbfgs', 'newton-cg', 'sag', 'saga'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_multi_class': masked_array(data=['ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr',
                   'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr', 'ovr'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[120, 120, 120, 120, 220, 220, 220, 220, 420, 420, 420,
                   420, 720, 720, 720, 720, 120, 120, 120, 120, 220, 220,
                   220, 220, 420, 420, 420, 420, 720, 720, 720, 720, 120,
                   120, 120, 120, 220, 220, 220, 220, 420, 420, 420, 420,
                   720, 720, 720, 720, 120, 120, 120, 120, 220, 220, 220,
                   220, 420, 420, 420, 420, 720, 720, 720, 720, 120, 120,
                   120, 120, 220, 220, 220, 220, 420, 420, 420, 420, 720,
                   720, 720, 720, 120, 120, 120, 120, 220, 220, 220, 220,
                   420, 420, 420, 420, 720, 720, 720, 720, 120, 120, 120,
                   120, 220, 220, 220, 220, 420, 420, 420, 420, 720, 720,
                   720, 720, 120, 120, 120, 120, 220, 220, 220, 220, 420,
                   420, 420, 420, 720, 720, 720, 720, 120, 120, 120, 120,
                   220, 220, 220, 220, 420, 420, 420, 420, 720, 720, 720,
                   720, 120, 120, 120, 120, 220, 220, 220, 220, 420, 420,
                   420, 420, 720, 720, 720, 720],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fit_intercept': masked_array(data=[True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_class_weight': masked_array(data=['balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced', 'balanced', 'balanced', 'balanced'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_C': masked_array(data=[0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                   0.01, 0.01, 0.01, 0.01, 0.01, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.001}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.01}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 0.1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 1}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': True, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 120, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 220, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 420, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'lbfgs', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'newton-cg', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'sag', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}, {'solver': 'saga', 'penalty': 'l2', 'n_jobs': -1, 'multi_class': 'ovr', 'max_iter': 720, 'fit_intercept': False, 'class_weight': 'balanced', 'C': 10}], 'split0_test_score': array([0.51316904, 0.51316904, 0.51316904, 0.51316904, 0.51316904,
       0.51316904, 0.51316904, 0.51316904, 0.51316904, 0.51316904,
       0.51316904, 0.51316904, 0.51316904, 0.51316904, 0.51316904,
       0.51316904, 0.50720939, 0.50720939, 0.50720939, 0.50720939,
       0.50720939, 0.50720939, 0.50720939, 0.50720939, 0.50720939,
       0.50720939, 0.50720939, 0.50720939, 0.50720939, 0.50720939,
       0.50720939, 0.50720939, 0.53136388, 0.53136388, 0.53136388,
       0.53136388, 0.53136388, 0.53136388, 0.53136388, 0.53136388,
       0.53136388, 0.53136388, 0.53136388, 0.53136388, 0.53136388,
       0.53136388, 0.53136388, 0.53136388, 0.53772015, 0.53772015,
       0.53772015, 0.53772015, 0.53772015, 0.53772015, 0.53772015,
       0.53772015, 0.53772015, 0.53772015, 0.53772015, 0.53772015,
       0.53772015, 0.53772015, 0.53772015, 0.53772015, 0.5222656 ,
       0.5222656 , 0.5222656 , 0.5222656 , 0.5222656 , 0.5222656 ,
       0.5222656 , 0.5222656 , 0.5222656 , 0.5222656 , 0.5222656 ,
       0.5222656 , 0.5222656 , 0.5222656 , 0.5222656 , 0.5222656 ,
       0.53192961, 0.53192961, 0.53192961, 0.53192961, 0.53192961,
       0.53192961, 0.53192961, 0.53192961, 0.53192961, 0.53192961,
       0.53192961, 0.53192961, 0.53192961, 0.53192961, 0.53192961,
       0.53192961, 0.52069905, 0.52069905, 0.52069905, 0.52069905,
       0.52069905, 0.52069905, 0.52069905, 0.52069905, 0.52069905,
       0.52069905, 0.52069905, 0.52069905, 0.52069905, 0.52069905,
       0.52069905, 0.52069905, 0.52790178, 0.52790178, 0.52790178,
       0.52786894, 0.52790178, 0.52790178, 0.52790178, 0.52790178,
       0.52790178, 0.52790178, 0.52790178, 0.52790178, 0.52790178,
       0.52790178, 0.52790178, 0.52786894, 0.52281901, 0.52281901,
       0.52281901, 0.52281901, 0.52281901, 0.52281901, 0.52281901,
       0.52281901, 0.52281901, 0.52281901, 0.52281901, 0.52281901,
       0.52281901, 0.52281901, 0.52281901, 0.52281901, 0.52987606,
       0.52987606, 0.52987606, 0.52987606, 0.52987606, 0.52987606,
       0.52987606, 0.52987606, 0.52987606, 0.52987606, 0.52987606,
       0.52987606, 0.52987606, 0.52987606, 0.52987606, 0.52987606]), 'split1_test_score': array([0.51588764, 0.51588764, 0.51588764, 0.51588764, 0.51588764,
       0.51588764, 0.51343543, 0.51588764, 0.51588764, 0.51588764,
       0.51343543, 0.51588764, 0.51588764, 0.51588764, 0.51588764,
       0.51588764, 0.50661172, 0.50661172, 0.50661172, 0.50661172,
       0.50661172, 0.50661172, 0.50661172, 0.50661172, 0.50661172,
       0.50661172, 0.50661172, 0.50661172, 0.50661172, 0.50661172,
       0.50661172, 0.50661172, 0.54691982, 0.54691982, 0.54691982,
       0.54691982, 0.54691982, 0.54691982, 0.54691982, 0.54691982,
       0.54691982, 0.54691982, 0.54691982, 0.54691982, 0.54691982,
       0.54691982, 0.54691982, 0.54691982, 0.54395866, 0.54395866,
       0.54395866, 0.54395866, 0.54395866, 0.54395866, 0.54395866,
       0.54395866, 0.54395866, 0.54395866, 0.54395866, 0.54395866,
       0.54395866, 0.54395866, 0.54395866, 0.54395866, 0.55412371,
       0.55412371, 0.55412371, 0.55215725, 0.55412371, 0.55412371,
       0.55412371, 0.55215725, 0.55412371, 0.55412371, 0.55412371,
       0.55412371, 0.55412371, 0.55412371, 0.55412371, 0.55215725,
       0.54214892, 0.54214892, 0.54214892, 0.54214892, 0.54214892,
       0.54214892, 0.54214892, 0.54214892, 0.54214892, 0.54214892,
       0.54214892, 0.54214892, 0.54214892, 0.54214892, 0.54214892,
       0.54214892, 0.55018842, 0.55018842, 0.55018842, 0.55018842,
       0.55018842, 0.55018842, 0.55018842, 0.55018842, 0.55018842,
       0.55018842, 0.55018842, 0.55018842, 0.55018842, 0.55018842,
       0.55018842, 0.55018842, 0.54376653, 0.54376653, 0.54376653,
       0.54376653, 0.54376653, 0.54376653, 0.54376653, 0.54376653,
       0.54376653, 0.54376653, 0.54376653, 0.54376653, 0.54376653,
       0.54376653, 0.54376653, 0.54376653, 0.54590255, 0.54590255,
       0.54590255, 0.54590255, 0.54590255, 0.54590255, 0.54590255,
       0.54590255, 0.54590255, 0.54590255, 0.54590255, 0.54590255,
       0.54590255, 0.54590255, 0.54590255, 0.54590255, 0.54376653,
       0.54376653, 0.54376653, 0.54376653, 0.54376653, 0.54376653,
       0.54376653, 0.54376653, 0.54376653, 0.54376653, 0.54376653,
       0.54376653, 0.54376653, 0.54376653, 0.54376653, 0.54376653]), 'split2_test_score': array([0.51293952, 0.51293952, 0.51293952, 0.51293952, 0.51293952,
       0.51293952, 0.51293952, 0.51293952, 0.51293952, 0.51293952,
       0.51293952, 0.51293952, 0.51293952, 0.51293952, 0.51293952,
       0.51293952, 0.50809959, 0.50809959, 0.50809959, 0.50809959,
       0.50809959, 0.50809959, 0.50809959, 0.50809959, 0.50809959,
       0.50809959, 0.50809959, 0.50809959, 0.50809959, 0.50809959,
       0.50809959, 0.50809959, 0.51554831, 0.51554831, 0.51554831,
       0.51554831, 0.51554831, 0.51554831, 0.51554831, 0.51554831,
       0.51554831, 0.51554831, 0.51554831, 0.51554831, 0.51554831,
       0.51554831, 0.51554831, 0.51554831, 0.51274876, 0.51274876,
       0.51274876, 0.51274876, 0.51274876, 0.51274876, 0.51274876,
       0.51274876, 0.51274876, 0.51274876, 0.51274876, 0.51274876,
       0.51274876, 0.51274876, 0.51274876, 0.51274876, 0.51486576,
       0.51486576, 0.51486576, 0.51486576, 0.51486576, 0.51486576,
       0.51486576, 0.51486576, 0.51486576, 0.51486576, 0.51486576,
       0.51486576, 0.51486576, 0.51486576, 0.51486576, 0.51486576,
       0.51619651, 0.51619651, 0.51619651, 0.51619651, 0.51619651,
       0.51619651, 0.51619651, 0.51619651, 0.51619651, 0.51619651,
       0.51619651, 0.51619651, 0.51619651, 0.51619651, 0.51619651,
       0.51619651, 0.52592175, 0.52592175, 0.52592175, 0.52592175,
       0.52592175, 0.52592175, 0.52592175, 0.52592175, 0.52592175,
       0.52592175, 0.52592175, 0.52592175, 0.52592175, 0.52592175,
       0.52592175, 0.52592175, 0.51619651, 0.51619651, 0.51619651,
       0.51619651, 0.51619651, 0.51619651, 0.51619651, 0.51619651,
       0.51619651, 0.51619651, 0.51619651, 0.51619651, 0.51619651,
       0.51619651, 0.51619651, 0.51619651, 0.52792933, 0.52792933,
       0.52792933, 0.52792933, 0.52792933, 0.52792933, 0.52792933,
       0.52792933, 0.52792933, 0.52792933, 0.52792933, 0.52792933,
       0.52792933, 0.52792933, 0.52792933, 0.52792933, 0.51814696,
       0.51814696, 0.51814696, 0.51814696, 0.51814696, 0.51814696,
       0.51814696, 0.51814696, 0.51814696, 0.51814696, 0.51814696,
       0.51814696, 0.51814696, 0.51814696, 0.51814696, 0.51814696]), 'split3_test_score': array([0.5111477 , 0.5111477 , 0.5111477 , 0.5111477 , 0.5111477 ,
       0.5111477 , 0.5111477 , 0.5111477 , 0.5111477 , 0.5111477 ,
       0.5111477 , 0.5111477 , 0.5111477 , 0.5111477 , 0.5111477 ,
       0.5111477 , 0.51672278, 0.51672278, 0.51672278, 0.51672278,
       0.51672278, 0.51672278, 0.51672278, 0.51672278, 0.51672278,
       0.51672278, 0.51672278, 0.51672278, 0.51672278, 0.51672278,
       0.51672278, 0.51672278, 0.51530359, 0.51530359, 0.51530359,
       0.51530359, 0.51530359, 0.51530359, 0.51530359, 0.51530359,
       0.51530359, 0.51530359, 0.51530359, 0.51530359, 0.51530359,
       0.51530359, 0.51530359, 0.51530359, 0.50657458, 0.50657458,
       0.50657458, 0.50657458, 0.50657458, 0.50657458, 0.50657458,
       0.50657458, 0.50657458, 0.50657458, 0.50657458, 0.50657458,
       0.50657458, 0.50657458, 0.50657458, 0.50657458, 0.51963294,
       0.51963294, 0.51963294, 0.51963294, 0.51963294, 0.51963294,
       0.51963294, 0.51963294, 0.51963294, 0.51963294, 0.51963294,
       0.51963294, 0.51963294, 0.51963294, 0.51963294, 0.51963294,
       0.5152944 , 0.5152944 , 0.5152944 , 0.5152944 , 0.5152944 ,
       0.5152944 , 0.5152944 , 0.5152944 , 0.5152944 , 0.5152944 ,
       0.5152944 , 0.5152944 , 0.5152944 , 0.5152944 , 0.5152944 ,
       0.5152944 , 0.52410654, 0.52410654, 0.52410654, 0.52410654,
       0.52410654, 0.52410654, 0.52410654, 0.52410654, 0.52410654,
       0.52410654, 0.52410654, 0.52410654, 0.52410654, 0.52410654,
       0.52410654, 0.52410654, 0.51526398, 0.51526398, 0.51526398,
       0.51526398, 0.51526398, 0.51526398, 0.51526398, 0.51526398,
       0.51526398, 0.51526398, 0.51526398, 0.51526398, 0.51526398,
       0.51526398, 0.51526398, 0.51526398, 0.52608478, 0.52608478,
       0.52608478, 0.52608478, 0.52608478, 0.52608478, 0.52608478,
       0.52608478, 0.52608478, 0.52608478, 0.52608478, 0.52608478,
       0.52608478, 0.52608478, 0.52608478, 0.52608478, 0.5132725 ,
       0.5132725 , 0.5132725 , 0.5132725 , 0.5132725 , 0.5132725 ,
       0.5132725 , 0.5132725 , 0.5132725 , 0.5132725 , 0.5132725 ,
       0.5132725 , 0.5132725 , 0.5132725 , 0.5132725 , 0.5132725 ]), 'split4_test_score': array([0.49193919, 0.49193919, 0.49193919, 0.49193919, 0.49193919,
       0.49193919, 0.49193919, 0.49193919, 0.49193919, 0.49193919,
       0.49193919, 0.49193919, 0.49193919, 0.49193919, 0.49193919,
       0.49193919, 0.49103835, 0.49103835, 0.49103835, 0.49103835,
       0.49103835, 0.49103835, 0.49103835, 0.49103835, 0.49103835,
       0.49103835, 0.49103835, 0.49103835, 0.49103835, 0.49103835,
       0.49104813, 0.49103835, 0.50118869, 0.50118869, 0.50118869,
       0.50118869, 0.50118869, 0.50118869, 0.50118869, 0.50118869,
       0.50118869, 0.50118869, 0.50118869, 0.50118869, 0.50118869,
       0.50118869, 0.50118869, 0.50118869, 0.49582273, 0.49582273,
       0.49582273, 0.49582273, 0.49582273, 0.49582273, 0.49582273,
       0.49582273, 0.49582273, 0.49582273, 0.49582273, 0.49582273,
       0.49582273, 0.49582273, 0.49582273, 0.49582273, 0.49243054,
       0.49243054, 0.49243054, 0.49243054, 0.49243054, 0.49243054,
       0.49243054, 0.49243054, 0.49243054, 0.49243054, 0.49243054,
       0.49243054, 0.49243054, 0.49243054, 0.49243054, 0.49243054,
       0.48637745, 0.48637745, 0.48637745, 0.48637745, 0.48637745,
       0.48637745, 0.48637745, 0.48637745, 0.48637745, 0.48637745,
       0.48637745, 0.48637745, 0.48637745, 0.48637745, 0.48637745,
       0.48637745, 0.48586918, 0.48586918, 0.48586918, 0.48586918,
       0.48586918, 0.48586918, 0.48586918, 0.48586918, 0.48586918,
       0.48586918, 0.48586918, 0.48586918, 0.48586918, 0.48586918,
       0.48586918, 0.48586918, 0.48466704, 0.48466704, 0.48466704,
       0.48466704, 0.48466704, 0.48466704, 0.48466704, 0.48466704,
       0.48466704, 0.48466704, 0.48466704, 0.48466704, 0.48466704,
       0.48466704, 0.48466704, 0.48466704, 0.48597073, 0.48597073,
       0.48597073, 0.48597073, 0.48597073, 0.48597073, 0.48597073,
       0.48597073, 0.48597073, 0.48597073, 0.48597073, 0.48597073,
       0.48597073, 0.48597073, 0.48597073, 0.48597073, 0.48466704,
       0.48466704, 0.48466704, 0.48466704, 0.48466704, 0.48466704,
       0.48466704, 0.48466704, 0.48466704, 0.48466704, 0.48466704,
       0.48466704, 0.48466704, 0.48466704, 0.48466704, 0.48466704]), 'mean_test_score': array([0.50901662, 0.50901662, 0.50901662, 0.50901662, 0.50901662,
       0.50901662, 0.50852617, 0.50901662, 0.50901662, 0.50901662,
       0.50852617, 0.50901662, 0.50901662, 0.50901662, 0.50901662,
       0.50901662, 0.50593637, 0.50593637, 0.50593637, 0.50593637,
       0.50593637, 0.50593637, 0.50593637, 0.50593637, 0.50593637,
       0.50593637, 0.50593637, 0.50593637, 0.50593637, 0.50593637,
       0.50593832, 0.50593637, 0.52206486, 0.52206486, 0.52206486,
       0.52206486, 0.52206486, 0.52206486, 0.52206486, 0.52206486,
       0.52206486, 0.52206486, 0.52206486, 0.52206486, 0.52206486,
       0.52206486, 0.52206486, 0.52206486, 0.51936498, 0.51936498,
       0.51936498, 0.51936498, 0.51936498, 0.51936498, 0.51936498,
       0.51936498, 0.51936498, 0.51936498, 0.51936498, 0.51936498,
       0.51936498, 0.51936498, 0.51936498, 0.51936498, 0.52066371,
       0.52066371, 0.52066371, 0.52027042, 0.52066371, 0.52066371,
       0.52066371, 0.52027042, 0.52066371, 0.52066371, 0.52066371,
       0.52066371, 0.52066371, 0.52066371, 0.52066371, 0.52027042,
       0.51838938, 0.51838938, 0.51838938, 0.51838938, 0.51838938,
       0.51838938, 0.51838938, 0.51838938, 0.51838938, 0.51838938,
       0.51838938, 0.51838938, 0.51838938, 0.51838938, 0.51838938,
       0.51838938, 0.52135699, 0.52135699, 0.52135699, 0.52135699,
       0.52135699, 0.52135699, 0.52135699, 0.52135699, 0.52135699,
       0.52135699, 0.52135699, 0.52135699, 0.52135699, 0.52135699,
       0.52135699, 0.52135699, 0.51755917, 0.51755917, 0.51755917,
       0.5175526 , 0.51755917, 0.51755917, 0.51755917, 0.51755917,
       0.51755917, 0.51755917, 0.51755917, 0.51755917, 0.51755917,
       0.51755917, 0.51755917, 0.5175526 , 0.52174128, 0.52174128,
       0.52174128, 0.52174128, 0.52174128, 0.52174128, 0.52174128,
       0.52174128, 0.52174128, 0.52174128, 0.52174128, 0.52174128,
       0.52174128, 0.52174128, 0.52174128, 0.52174128, 0.51794582,
       0.51794582, 0.51794582, 0.51794582, 0.51794582, 0.51794582,
       0.51794582, 0.51794582, 0.51794582, 0.51794582, 0.51794582,
       0.51794582, 0.51794582, 0.51794582, 0.51794582, 0.51794582]), 'std_test_score': array([0.00867206, 0.00867206, 0.00867206, 0.00867206, 0.00867206,
       0.00867206, 0.00833229, 0.00867206, 0.00867206, 0.00867206,
       0.00833229, 0.00867206, 0.00867206, 0.00867206, 0.00867206,
       0.00867206, 0.00830727, 0.00830727, 0.00830727, 0.00830727,
       0.00830727, 0.00830727, 0.00830727, 0.00830727, 0.00830727,
       0.00830727, 0.00830727, 0.00830727, 0.00830727, 0.00830727,
       0.00830377, 0.00830727, 0.01567313, 0.01567313, 0.01567313,
       0.01567313, 0.01567313, 0.01567313, 0.01567313, 0.01567313,
       0.01567313, 0.01567313, 0.01567313, 0.01567313, 0.01567313,
       0.01567313, 0.01567313, 0.01567313, 0.01845734, 0.01845734,
       0.01845734, 0.01845734, 0.01845734, 0.01845734, 0.01845734,
       0.01845734, 0.01845734, 0.01845734, 0.01845734, 0.01845734,
       0.01845734, 0.01845734, 0.01845734, 0.01845734, 0.0197683 ,
       0.0197683 , 0.0197683 , 0.0191072 , 0.0197683 , 0.0197683 ,
       0.0197683 , 0.0191072 , 0.0197683 , 0.0197683 , 0.0197683 ,
       0.0197683 , 0.0197683 , 0.0197683 , 0.0197683 , 0.0191072 ,
       0.01890505, 0.01890505, 0.01890505, 0.01890505, 0.01890505,
       0.01890505, 0.01890505, 0.01890505, 0.01890505, 0.01890505,
       0.01890505, 0.01890505, 0.01890505, 0.01890505, 0.01890505,
       0.01890505, 0.02058867, 0.02058867, 0.02058867, 0.02058867,
       0.02058867, 0.02058867, 0.02058867, 0.02058867, 0.02058867,
       0.02058867, 0.02058867, 0.02058867, 0.02058867, 0.02058867,
       0.02058867, 0.02058867, 0.01940522, 0.01940522, 0.01940522,
       0.01940172, 0.01940522, 0.01940522, 0.01940522, 0.01940522,
       0.01940522, 0.01940522, 0.01940522, 0.01940522, 0.01940522,
       0.01940522, 0.01940522, 0.01940172, 0.01960418, 0.01960418,
       0.01960418, 0.01960418, 0.01960418, 0.01960418, 0.01960418,
       0.01960418, 0.01960418, 0.01960418, 0.01960418, 0.01960418,
       0.01960418, 0.01960418, 0.01960418, 0.01960418, 0.01968958,
       0.01968958, 0.01968958, 0.01968958, 0.01968958, 0.01968958,
       0.01968958, 0.01968958, 0.01968958, 0.01968958, 0.01968958,
       0.01968958, 0.01968958, 0.01968958, 0.01968958, 0.01968958]), 'rank_test_score': array([129, 129, 129, 129, 129, 129, 143, 129, 129, 129, 143, 129, 129,
       129, 129, 129, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
       146, 146, 146, 146, 145, 146,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,  65,  65,  65,  65,
        65,  65,  65,  65,  65,  65,  65,  65,  65,  65,  65,  65,  49,
        49,  49,  62,  49,  49,  49,  62,  49,  49,  49,  49,  49,  49,
        49,  62,  81,  81,  81,  81,  81,  81,  81,  81,  81,  81,  81,
        81,  81,  81,  81,  81,  33,  33,  33,  33,  33,  33,  33,  33,
        33,  33,  33,  33,  33,  33,  33,  33, 113, 113, 113, 127, 113,
       113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 127,  17,  17,
        17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
        17,  97,  97,  97,  97,  97,  97,  97,  97,  97,  97,  97,  97,
        97,  97,  97,  97], dtype=int32)}